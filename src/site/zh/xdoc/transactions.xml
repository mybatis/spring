<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2017 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-Spring | 第四章 事务</title>
    <author email="hpresnall@gmail.com">Hunter Presnall</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
    <author email="nanlei1987@gmail.com">Nan Lei</author>
  </properties>
                             
  <body>
    <section name="第四章 事务">
      <p>
一个使用 MyBatis-Spring 的主要原因是它允许 MyBatis 参与到 Spring 的事务管理中。而
不是给 MyBatis 创建一个新的特定的事务管理器,MyBatis-Spring 利用了存在于 Spring 中的
DataSourceTransactionManager。
      </p>
      <p>
一旦 Spring 的 PlatformTransactionManager 配置好了,你可以在 Spring 中以你通常的做
法来配置事务。@Transactional 注解和 AOP(Aspect-Oriented Program,面向切面编程,译
者注)样式的配置都是支持的。在事务处理期间,一个单独的 SqlSession 对象将会被创建
和使用。当事务完成时,这个 session 会以合适的方式提交或回滚。
      </p>
      <p>
一旦事务创建之后,MyBatis-Spring 将会透明的管理事务。在你的 DAO 类中就不需要额
外的代码了。
      </p>
  
    <subsection name="标准配置" id="configuration">
      <p>
要 开 启 Spring 的 事 务 处 理 , 在 Spring 的 配 置 文 件 中 简 单 创 建 一 个
DataSourceTransactionManager 对象:
      </p>
      <source><![CDATA[
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <constructor-arg ref="dataSource" />
</bean>]]></source>

      <source><![CDATA[
@Bean
public DataSourceTransactionManager transactionManager() {
  return new DataSourceTransactionManager(dataSource());
}]]></source>

      <p>
指定的 DataSource 一般可以是你使用 Spring 的任意 JDBC DataSource。这包含了连接
池和通过 JNDI 查找获得的 DataSource。
      </p>
      <p>
要注意,
为事务管理器指定的 DataSource 必须和用来创建 SqlSessionFactoryBean 的
是同一个数据源,否则事务管理器就无法工作了。
      </p>
    </subsection>

    <subsection name="容器管理事务" id="container">
      <p>
如果你正使用一个 JEE 容器而且想让 Spring 参与到容器管理事务(Container managed
transactions,CMT,译者注)中,那么 Spring 应该使用 JtaTransactionManager 或它的容
器指定的子类来配置。做这件事情的最方便的方式是用 Spring 的事务命名空间 or the <code>JtaTransactionManagerFactoryBean</code>:
      </p>
      <source><![CDATA[<tx:jta-transaction-manager />]]></source>

      <source><![CDATA[
@Bean
public JtaTransactionManager transactionManager() {
  return new JtaTransactionManagerFactoryBean().getObject();
}]]></source>

      <p>
在这种配置中,MyBatis 将会和其它由 CMT 配置的 Spring 事务资源一样。Spring 会自动
使用任意存在的容器事务,在上面附加一个 SqlSession。如果没有开始事务,或者需要基
于事务配置,Spring 会开启一个新的容器管理事务。
      </p>
      <p>
注 意 , 如 果 你 想 使 用 CMT , 而 不 想 使 用 Spring 的 事 务 管 理 , 你 就 必 须 配 置
SqlSessionFactoryBean 来使用基本的 MyBatis 的 ManagedTransactionFactory 而不是其
它任意的 Spring 事务管理器:
      </p>
      <source><![CDATA[<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="transactionFactory">
    <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
  </property>  
</bean>]]></source>

      <source><![CDATA[
@Bean
public SqlSessionFactory sqlSessionFactory() {
  SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
  factoryBean.setDataSource(dataSource());
  factoryBean.setTransactionFactory(new ManagedTransactionFactory());
  return factoryBean.getObject();
}]]></source>

    </subsection>
  
    <subsection name="编程式事务管理" id="programmatic">
      <p>
MyBatis 的 SqlSession 提供指定的方法来处理编程式的事务。
但是当使用 MyBatis-Spring
时,
bean 将会使用 Spring 管理的 SqlSession 或映射器来注入。
那就是说 Spring 通常是处理
事务的。
      </p>
      <p>
你 不 能 在 Spring 管 理 的 SqlSession 上 调 用 SqlSession.commit() ,
SqlSession.rollback() 或 SqlSession.close() 方 法 。 如 果 这 样 做 了 , 就 会 抛 出
UnsupportedOperationException 异常。注意在使用注入的映射器时不能访问那些方法。
      </p>
      <p>
无论 JDBC 连接是否设置为自动提交,
SqlSession 数据方法的执行或在 Spring 事务之外
任意调用映射器方法都将会自动被提交。
      </p>
      <p>
如果你想编程式地控制事务,请参考 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction-programmatic">the Spring reference document(Data Access -Programmatic transaction management-)</a>。这段代码展示了如何手动
使用在 节描述的 PlatformTransactionManager 来处理事务。
      </p>
      <source><![CDATA[
TransactionStatus txStatus =
    transactionManager.getTransaction(new DefaultTransactionDefinition());
try {
  userMapper.insertUser(user);
} catch (Exception e) {
  transactionManager.rollback(txStatus);
  throw e;
}
transactionManager.commit(txStatus);]]></source>

      <p>
        You can omit to call the <code>commit</code> and <code>rollback</code> method using the <code>TransactionTemplate</code>.
      </p>

      <source><![CDATA[
TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);
transactionTemplate.execute(txStatus -> {
  userMapper.insertUser(user);
  return null;
});]]></source>

      <p>
注意这段代码展示了一个映射器,但它也能和 SqlSession 一起使用。
      </p>
      </subsection>
    </section>
  </body>
</document>
