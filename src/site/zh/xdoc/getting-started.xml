<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-Spring | 第二章 入门</title>
    <author email="hpresnall@gmail.com">Hunter Presnall</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
    <author email="nanlei1987@gmail.com">Nan Lei</author>
  </properties>

  <body>
    <section name="第二章 入门">
      <p>
本章将会以简略的步骤告诉你如何安装和创建 MyBatis-Spring,并构建一个简单的数据
访问事务性的应用程序。
      </p>

    <subsection name="Installation">
      <p>
要使用 MyBatis-Spring 模块,你只需要包含
        <code>
          mybatis-spring-x.x.x.jar
        </code>
文 件就可以了,并在类路径中加入相关的依赖。
      </p>
      <p>
如果你使用 Maven,那么在 pom.xml 中加入下面的代码即可:
      </p>
        <source><![CDATA[
<dependency>
  <groupId>org.mybatis</groupId>
  <artifactId>mybatis-spring</artifactId>
  <version>x.x.x</version>
</dependency>]]></source>
    </subsection>

    <subsection name="Quick Setup">
      <p>
要和 Spring 一起使用 MyBatis,你需要在 Spring 应用上下文中定义至少两样东西:一个
SqlSessionFactory 和至少一个数据映射器类。
      </p>

      <p>
在 MyBatis-Spring 中,SqlSessionFactoryBean 是用于创建 SqlSessionFactory 的。要
配置这个工厂 bean,放置下面的代码在 Spring 的 XML 配置文件中:
      </p>

        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
</bean>]]></source>

      <p>
要注意 SqlSessionFactory 需要一个 DataSource(数据源,译者注)
。这可以是任意
的 DataSource,配置它就和配置其它 Spring 数据库连接一样。
      </p>

      <p>
        加入你有一个数据映射器定义如下:
      </p>
        <source><![CDATA[public interface UserMapper {
  @Select("SELECT * FROM users WHERE id = #{userId}")
  User getUser(@Param("userId") String userId);
} ]]></source>

      <p>
那么可以使用 MapperFactoryBean,像下面这样来把接口加入到 Spring 中:
      </p>

        <source><![CDATA[
<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
  <property name="mapperInterface" value="org.mybatis.spring.sample.mapper.UserMapper" />
  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>]]></source>

      <p>
要注意,所指定的映射器类必须是一个接口,而不是具体的实现类。在这个示例中,注
解被用来指定 SQL 语句,但是 MyBatis 的映射器 XML 文件也可以用。
      </p>

      <p>
一旦配置好,你可以用注入其它任意 Spring 的 bean 相同的方式直接注入映射器到你的
business/service 对象中。MapperFactoryBean 处理 SqlSession 的创建和关闭它。如果使用
了 Spring 的事务,那么当事务完成时,session 将会提交或回滚。最终,任何异常都会被翻
译成 Spring 的 DataAccessException 异常。
      </p>

      <p>
调用 MyBatis 数据方法现在只需一行代码:
      </p>
        <source><![CDATA[
public class FooServiceImpl implements FooService {

private UserMapper userMapper;

public void setUserMapper(UserMapper userMapper) {
  this.userMapper = userMapper;
}

public User doSomeBusinessStuff(String userId) {
  return this.userMapper.getUser(userId);
}]]></source>
      </subsection>
    </section>
  </body>
</document>
