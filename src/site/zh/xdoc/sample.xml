<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2017 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>MyBatis-Spring | Sample Code</title>
		<author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
	</properties>

	<body>
		<section name="Sample Code">

			<p>
				<span class="label important">NOTE</span>
				查看 <a href="https://github.com/mybatis/jpetstore-6">JPetstore 6 demo</a> 获取更多关于 Spring 在完整的应用服务上面的使用例子.
			</p>

			<p>
				您可以从此处查看 MyBatis-Spring 的示例代码 <a href="https://github.com/mybatis/spring/tree/master/src/test/java/org/mybatis/spring/sample">repo</a>:
			</p>
			<p>
				任何一个示例都在 JUnit 5 中运行.
			</p>
			<p>
				示例代码显示了事务服务从数据访问层获取域对象的典型设计.
			</p>
			<p>
				<code>FooService.java</code> 作为服务:
			</p>
			<source><![CDATA[
@Transactional
public class FooService {

  private final UserMapper userMapper;

  public FooService(UserMapper userMapper) {
    this.userMapper = userMapper;
  }

  public User doSomeBusinessStuff(String userId) {
    return this.userMapper.getUser(userId);
  }

}
]]></source>
			<p>
				它是一个事务 bean，所以当调用它的任何方法时，事务被启动并且在方法结束时提交，且不会抛出未经检查的异常.请注意，事务行为配置为 <code>@Transactional</code> 属性. 这不是必需的 Spring 提供的任何其他方式都可用于划分你的事务.
			</p>
			<p>
				此服务调用使用 MyBatis 构建的数据访问层. 这层只是一个界面 <code>UserMapper.java</code> 这将与 MyBatis 建立的动态代理一起使用运行时并通过 Spring 注入服务.
			</p>
			<source><![CDATA[
public interface UserMapper {

  User getUser(String userId);

}
]]></source>			
			<p> 
			    注意，为了简单起见，我们使用了接口 <code>UserMapper.java</code> 对于 DAO 场景其中一个 DAO 层是用接口和一个实现构建的，尽管在这种情况下它将会更多足够使用一个接口调用 <code>UserDao.java</code> 来取代.
			</p>
			<p>
				我们将看到不同的方法来找到映射器接口，将其注册到 Spring 并将其注入到服务 bean 中:
			</p>
			<table>
				<caption>使用场景</caption>
				<thead>
					<tr>
						<th>测试用样例</th>
						<th>描述</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>SampleMapperTest.java</code>
						</td>
						<td>
							显示基于 <code>MapperFactoryBean</code> 的基本配置，这将动态构建一个实现 <code>UserMapper</code>
						</td>
					</tr>
					<tr>
						<td>
							<code>SampleScannerTest.java</code>
						</td>
						<td>
							显示如何使用 <code>MapperScannerConfigurer</code> 来实现项目中所有 mappers 的自动发现.
						</td>
					</tr>
					<tr>
						<td>
							<code>SampleSqlSessionTest.java</code>
						</td>
						<td>
							显示如何使用 Spring  <code>SqlSession</code> 手动编写 DAO 层并提供你自己的实现 <code>UserDaoImpl.java</code>.
						</td>
					</tr>
					<tr>
						<td>
							<code>SampleEnableTest</code>
						</td>
						<td>
							现实如何使用 Spring 的 <code>@Configuration</code> 和 <code>@MapperScann</code> 注解来自动发现 mappers.
						</td>
					</tr>
					<tr>
						<td>
							<code>SampleNamespaceTest</code>
						</td>
						<td>
							显示如何使用自定义 MyBatis XML 命名空间. 
						</td>
					</tr>
          <tr>
            <td>
              <code>SampleJavaConfigTest.java</code>
            </td>
            <td>
              Shows how to use Spring's <code>@Configuration</code> to create MyBatis beans manually.
            </td>
          </tr>
          <tr>
            <td>
              <code>SampleJobJavaConfigTest.java</code>
            </td>
            <td>
              Shows how to use <code>ItemReader</code> and <code>ItemWriter</code> on Spring Batch using Java Configuration.
            </td>
          </tr>
          <tr>
            <td>
              <code>SampleJobXmlConfigTest.java</code>
            </td>
            <td>
              Shows how to use <code>ItemReader</code> and <code>ItemWriter</code> on Spring Batch using XML Configuration.
            </td>
          </tr>
				</tbody>
			</table>
			<p>
				查看 <code>applicationContext.xml</code> 文件的区别以进行 MyBatis-Spring 实战.
			</p>

		</section>
	</body>
</document>

