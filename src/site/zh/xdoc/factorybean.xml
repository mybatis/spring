<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-Spring | SqlSessionFactoryBean</title>
    <author email="hpresnall@gmail.com">Hunter Presnall</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
    <author email="nanlei1987@gmail.com">Nan Lei</author>
  </properties>

  <body>
    <section name="SqlSessionFactoryBean">
      <p>
在基本的 MyBatis 中,session 工厂可以使用 SqlSessionFactoryBuilder 来创建。而在
MyBatis-Spring 中,则使用 SqlSessionFactoryBean 来替代。
      </p>
      
    <subsection name="Setup">
      <p>
要创建工厂 bean,放置下面的代码在 Spring 的 XML 配置文件中:
      </p>
        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
</bean>]]></source>
	  <p>
要注意 SqlSessionFactoryBean 实现了 Spring 的 FactoryBean 接口(请参考 Spring 文
档的 3.8 章节)这就说明了由 Spring 最终创建的 bean 不是 SqlSessionFactoryBean 本身。
而是工厂类的 getObject()返回的方法的结果。这种情况下,Spring 将会在应用启动时为你
创建 SqlSessionFactory 对象,然后将它以 SqlSessionFactory 为名来存储。在 Java 中,
相同的代码是:
      </p>

      <source><![CDATA[
SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
SqlSessionFactory sessionFactory = factoryBean.getObject();]]></source>

      <p>
在一般的 MyBatis-Spring 用法中,
你不需要直接使用 SqlSessionFactoryBean 或和其对
应的 SqlSessionFactory。相反,session 工厂将会被注入到 MapperFactoryBean 或其它扩
展了 SqlSessionDaoSupport 的 DAO(Data Access Object,数据访问对象,译者注)中。
      </p>
    </subsection>

    <subsection name="属性">

      <p>
SqlSessionFactory 有一个单独的必须属性,就是 JDBC 的 DataSource。这可以是任意
的 DataSource,其配置应该和其它 Spring 数据库连接是一样的。
      </p>

      <p>
一个通用的属性是 configLocation,它是用来指定 MyBatis 的 XML 配置文件路径的。
如果基本的 MyBatis 配置需要改变,
那么这就是一个需要它的地方。
通常这会是<code>&lt;settings&gt;</code>
或<code>&lt;typeAliases&gt;</code>的部分。
      </p>

      <p>
要注意这个配置文件不需要是一个完整的 MyBatis 配置。确切地说,任意环境,数据源
和 MyBatis 的事务管理器都会被忽略。SqlSessionFactoryBean 会创建它自己的,使用这些
值定制 MyBatis 的 Environment 时是需要的。
      </p>

      <p>
如果 MyBatis 映射器 XML 文件在和映射器类相同的路径下不存在,那么另外一个需要
配置文件的原因就是它了。使用这个配置,有两种选择。第一是手动在 MyBatis 的 XML 配
置文件中使用&lt;mappers&gt;部分来指定类路径。第二是使用工厂 bean 的 mapperLocations 属
性。
      </p>

      <p>
mapperLocations 属性使用一个资源位置的 list。
这个属性可以用来指定 MyBatis 的 XML
映射器文件的位置。
它的值可以包含 Ant 样式来加载一个目录中所有文件,
或者从基路径下
递归搜索所有路径。比如:
      </p>
      
        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
</bean>]]></source>

      <p>
这会从类路径下加载在 sample.config.mappers 包和它的子包中所有的 MyBatis 映射器
XML 文件。
      </p>

      <p>
在容器环境管理事务中,一个可能需要的属性是 transactionFactoryClass。请参考
第四章(4.2 节)中来查看有关部分。
      </p>

      <p>
假如你需要使用多数据库特性，你应该指定 <code>databaseIdProvider</code> 属性
      </p>
	<source><![CDATA[
<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    <property name="properties">
        <props>
            <prop key="SQL Server">sqlserver</prop>
            <prop key="DB2">db2</prop>
            <prop key="Oracle">oracle</prop>
            <prop key="MySQL">mysql</prop>
        </props>
    </property>
</bean>

<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
    <property name="properties" ref="vendorProperties"/>
</bean>

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
    <property name="databaseIdProvider" ref="databaseIdProvider"/>
</bean>]]></source>
        <p>
            <span class="label important">NOTE</span>
            从 1.3.0 版本开始,加入了 <code>configuration</code> 属性。
            它可以直接指定一个 <code>Configuration</code> 实例而不需要 MyBatis XML配置 文件。
            比如:
        </p>

        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="configuration">
    <bean class="org.apache.ibatis.session.Configuration">
      <property name="mapUnderscoreToCamelCase" value="true"/>
    </bean>
  </property>
</bean>]]></source>

      </subsection>
    </section>
  </body>
</document>
