<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2010-2017 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>MyBatis-Spring | 第三章 使用SqlSessionFactoryBean</title>
    <author email="hpresnall@gmail.com">Hunter Presnall</author>
    <author email="eduardo.macarron@gmail.com">Eduardo Macarron</author>
    <author email="nanlei1987@gmail.com">Nan Lei</author>
  </properties>

  <body>
    <section name="SqlSessionFactoryBean">
      <p>
在基础的MyBatis中，通过SqlSessionFactoryBuilder来创建SqlSessionFactory。而在
MyBatis-Spring中，则使用SqlSessionFactoryBean来创建。
      </p>
      
    <subsection name="设置">
      <p>
要创建工厂bean，将下面的代码放到Spring的XML配置文件中：
      </p>
        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
</bean>]]></source>

<p>
需要注意的是SqlSessionFactoryBean实现了Spring的FactoryBean接口(可查看官方文档<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-extension-factorybean">通过工厂bean自定义实例化逻辑</a>)。这意味着由Spring最终创建的bean并不是SqlSessionFactoryBean本身，
而是工厂类（SqlSessionFactoryBean）的 getObject()方法的返回结果。这种情况下，Spring
将会在应用启动时为你创建SqlSessionFactory的bean对象，然后将其名字设为sqlSessionFactory。
在 Java 中的等效代码如下:
</p>

      <source><![CDATA[
@Bean
public SqlSessionFactory sqlSessionFactory() {
  SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
  factoryBean.setDataSource(dataSource());
  return factoryBean.getObject();
}]]></source>

      <p>
在通常的MyBatis-Spring 用法中，你不需要直接使用SqlSessionFactoryBean或对
应的SqlSessionFactory。相反，session的工厂bean将会被注入到MapperFactoryBean或其它扩
展了SqlSessionDaoSupport的DAO（Data Access Object，数据访问对象，译者注）中。
      </p>
    </subsection>

    <subsection name="属性">

      <p>
SqlSessionFactory有一个唯一的必要属性：用于JDBC的DataSource。这可以是任意
的DataSource对象，它的配置应该和其它Spring数据库连接是一样的。
      </p>

      <p>
一个通用的属性是configLocation，它用来指定MyBatis的XML配置文件路径。
如果需要修改MyBatis的基础配置，那么它就有用了。通常这会是<code>&lt;settings&gt;</code>
或<code>&lt;typeAliases&gt;</code>的部分。
      </p>

      <p>
需要注意的是，这个配置文件并不需要是一个完整的MyBatis配置。确切地说，任何环境，数据源
和MyBatis的事务管理器都会被忽略。SqlSessionFactoryBean会创建它自己的,使用这些
值定制MyBatis的Environment时是需要的。
      </p>

      <p>
如果MyBatis在映射器类对应的路径下不存在与之相应的映射器XML文件，那么此时也需要配置文件。
有两种方式来使用配置：第一种是是手动在MyBatis的XML配置文件中使用&lt;mappers&gt;部分来
指定类路径；第二种是使用工厂bean的mapperLocations属性。
      </p>

      <p>
mapperLocations属性使用list来表示资源位置。这个属性可以用来指定MyBatis的XML
映射器文件的位置。它的值可以包含Ant样式来加载一个目录中所有文件,或者从基路径下
递归搜索所有路径。比如:
      </p>
      
        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
</bean>]]></source>

      <p>
这会从类路径下加载在sample.config.mappers包和它的子包中所有的MyBatis映射器XML文件。
      </p>

      <p>
在容器环境管理事务中,一个可能需要的属性是transactionFactoryClass。请参考第四章(4.2 节)中来查看有关部分。
如果你正在使用多数据库功能，那么就需要设置databaseIdProvider属性。
      </p>

      <p>
        如果你使用了多数据库，那么需要设置<code>databaseIdProvider</code>属性：
      </p>

      <source><![CDATA[
<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
  <property name="properties">
    <props>
      <prop key="SQL Server">sqlserver</prop>
      <prop key="DB2">db2</prop>
      <prop key="Oracle">oracle</prop>
      <prop key="MySQL">mysql</prop>
    </props>
  </property>
</bean>

<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="mapperLocations" value="classpath*:sample/config/mappers/**/*.xml" />
  <property name="databaseIdProvider" ref="databaseIdProvider"/>
</bean>]]></source>

        <p>
            <span class="label important">NOTE</span>
            自1.3.0版本开始添加<code>configuration</code>属性。
            它能够在没有MyBatis对应的XML配置文件的情况下直接指定<code>Configuration</code>实例。
            举个栗子:
        </p>

        <source><![CDATA[
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="configuration">
    <bean class="org.apache.ibatis.session.Configuration">
      <property name="mapUnderscoreToCamelCase" value="true"/>
    </bean>
  </property>
</bean>]]></source>

      </subsection>
    </section>
  </body>
</document>